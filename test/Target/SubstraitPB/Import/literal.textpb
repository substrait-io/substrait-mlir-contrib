# RUN: substrait-translate -protobuf-to-substrait %s \
# RUN:   --split-input-file="# ""-----" \
# RUN: | FileCheck %s

# RUN: substrait-translate -protobuf-to-substrait %s \
# RUN:   --split-input-file="# ""-----" --output-split-marker="// -----" \
# RUN: | substrait-translate -substrait-to-protobuf \
# RUN:   --split-input-file --output-split-marker="# ""-----" \
# RUN: | substrait-translate -protobuf-to-substrait \
# RUN:   --split-input-file="# ""-----" --output-split-marker="// -----" \
# RUN: | FileCheck %s

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, !substrait.interval_year_month, !substrait.interval_day_second> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal #substrait.interval_year_month<2024y 1m>
# CHECK-NEXT:      %[[V3:.*]] = literal #substrait.interval_day_second<9d 8000s>
# CHECK-NEXT:      yield %[[V2]], %[[V3]] : !substrait.interval_year_month, !substrait.interval_day_second
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, !substrait.interval_year_month, !substrait.interval_day_second>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          interval_year_to_month {
            years: 2024
            months: 1
          }
        }
      }
      expressions {
        literal {
          interval_day_to_second {
            days: 9
            seconds: 8000
          }
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, !substrait.time> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal #substrait.time<200000000us>
# CHECK-NEXT:      yield %[[V2]] : !substrait.time
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, !substrait.time>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          time: 200000000
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, !substrait.date> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal #substrait.date<200000000>
# CHECK-NEXT:      yield %[[V2]] : !substrait.date
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, !substrait.date>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          date: 200000000
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, !substrait.timestamp, !substrait.timestamp_tz> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal #substrait.timestamp<10000000000us>
# CHECK-NEXT:      %[[V3:.*]] = literal #substrait.timestamp_tz<10000000000us>
# CHECK-NEXT:      yield %[[V2]], %[[V3]] : !substrait.timestamp, !substrait.timestamp_tz
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, !substrait.timestamp, !substrait.timestamp_tz>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          timestamp: 10000000000
        }
      }
      expressions {
        literal {
          timestamp_tz: 10000000000
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, !substrait.binary> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal "4,5,6,7" : !substrait.binary
# CHECK-NEXT:      yield %[[V2]] : !substrait.binary
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, !substrait.binary>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          binary: "4,5,6,7"
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, !substrait.string> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal "hi" : !substrait.string
# CHECK-NEXT:      yield %[[V2]] : !substrait.string
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, !substrait.string>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          string: "hi"
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<f32> -> tuple<f32, f32, f64> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<f32>):
# CHECK-NEXT:      %[[V2:.*]] = literal 3.535000e+01 : f32
# CHECK-NEXT:      %[[V3:.*]] = literal 4.242000e+01 : f64
# CHECK-NEXT:      yield %[[V2]], %[[V3]] : f32, f64
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<f32, f32, f64>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                fp32 {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          fp32: 35.35
        }
      }
      expressions {
        literal {
          fp64: 42.42
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}

# -----

# CHECK:      substrait.plan version 0 : 42 : 1 {
# CHECK-NEXT:   relation
# CHECK:         %[[V0:.*]] = named_table
# CHECK-NEXT:    %[[V1:.*]] = project %[[V0]] : tuple<si1> -> tuple<si1, si1, si8, si16, si32, si64> {
# CHECK-NEXT:    ^[[BB0:.*]](%[[ARG0:.*]]: tuple<si1>):
# CHECK-NEXT:      %[[V2:.*]] = literal 0 : si1
# CHECK-NEXT:      %[[V3:.*]] = literal 2 : si8
# CHECK-NEXT:      %[[V4:.*]] = literal -1 : si16
# CHECK-NEXT:      %[[V5:.*]] = literal 35 : si32
# CHECK-NEXT:      %[[V6:.*]] = literal 42 : si64
# CHECK-NEXT:      yield %[[V2]], %[[V3]], %[[V4]], %[[V5]], %[[V6]] : si1, si8, si16, si32, si64
# CHECK-NEXT:    }
# CHECK-NEXT:    yield %[[V1]] : tuple<si1, si1, si8, si16, si32, si64>

relations {
  rel {
    project {
      common {
        direct {
        }
      }
      input {
        read {
          common {
            direct {
            }
          }
          base_schema {
            names: "a"
            struct {
              types {
                bool {
                  nullability: NULLABILITY_REQUIRED
                }
              }
              nullability: NULLABILITY_REQUIRED
            }
          }
          named_table {
            names: "t1"
          }
        }
      }
      expressions {
        literal {
          boolean: false
        }
      }
      expressions {
        literal {
          i8: 2
        }
      }
      expressions {
        literal {
          i16: -1
        }
      }
      expressions {
        literal {
          i32: 35
        }
      }
      expressions {
        literal {
          i64: 42
        }
      }
    }
  }
}
version {
  minor_number: 42
  patch_number: 1
}
