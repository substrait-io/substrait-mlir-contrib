//===-- SubstraitTypes.td - Substrait dialect types --------*- tablegen -*-===//
//
// Licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef SUBSTRAIT_DIALECT_SUBSTRAIT_IR_SUBSTRAITTYPES
#define SUBSTRAIT_DIALECT_SUBSTRAIT_IR_SUBSTRAITTYPES

include "substrait-mlir/Dialect/Substrait/IR/SubstraitDialect.td"
include "substrait-mlir/Dialect/Substrait/IR/SubstraitInterfaces.td"
include "mlir/IR/CommonTypeConstraints.td"

// Base class for Substrait dialect types.
class Substrait_Type<string name, string typeMnemonic, list<Trait> traits = []>
    : TypeDef<Substrait_Dialect, name, traits> {
  let mnemonic = typeMnemonic;
}

def Substrait_BinaryType : Substrait_Type<"Binary", "binary"> {
  let summary = "Substrait binary type";
  let description = [{
    This type represents a substrait binary type.
  }];
}

def Substrait_DateType : Substrait_Type<"Date", "date"> {
  let summary = "Substrait date type";
  let description = [{
    This type represents a substrait date type.
  }];
}

def Substrait_IntervalDaySecondType : Substrait_Type<"IntervalDaySecond", "interval_day_second"> {
  let summary = "Substrait interval day to second type";
  let description = [{
    This type represents a substrait interval day to second type. 
  }];
}

def Substrait_IntervalYearMonthType : Substrait_Type<"IntervalYearMonth", "interval_year_month"> {
  let summary = "Substrait interval year to month type";
  let description = [{
    This type represents a substrait interval year to month type. 
  }];
}

def Substrait_StringType : Substrait_Type<"String", "string"> {
  let summary = "Substrait string type";
  let description = [{
    This type represents a substrait string type.
  }];
}

def Substrait_TimeType : Substrait_Type<"Time", "time"> {
  let summary = "Substrait time type";
  let description = [{
    This type represents a substrait time type.
  }];
}

def Substrait_TimestampType : Substrait_Type<"Timestamp", "timestamp"> {
  let summary = "Substrait timezone-unaware timestamp type";
  let description = [{
    This type represents a substrait timezone-unaware timestamp type.
  }];
}

def Substrait_TimestampTzType : Substrait_Type<"TimestampTz", "timestamp_tz"> {
  let summary = "Substrait timezone-aware timestamp type";
  let description = [{
    This type represents a substrait timezone-aware timestamp type.
  }];
}

/// Currently supported atomic types, listed in order of substrait specification.
/// These correspond directly to the types in
/// https://github.com/substrait-io/substrait/blob/main/proto/substrait/type.proto.
def Substrait_AtomicTypes {
  list<Type> types = [
    SI1, // Boolean
    SI8, // I8
    SI16, // I16
    SI32, // I32
    SI64, // I64
    F32, // FP32
    F64, // FP64
    Substrait_StringType, // String
    Substrait_BinaryType, // Binary
    Substrait_TimestampType, // Timestamp
    Substrait_TimestampTzType, // TimestampTZ
    Substrait_DateType, // Date
    Substrait_TimeType, // Time
    Substrait_IntervalYearMonthType, // IntervalYear
    Substrait_IntervalDaySecondType, // IntervalDay
  ];
}

def Substrait_AnyType : Substrait_Type<"Any", "any"> {
  let summary = "type of a 'google.protobuf.Any' protobuf message";
  let description = [{
    This type represents the `type_url` fields of a `google.protobuf.Any`
    message. These messages consist of an opaque byte array and a string holding
    the URL identifying the type of what is contained in the byte array.
  }];
  let parameters = (ins "StringAttr":$type_url);
  let assemblyFormat = "`<` $type_url `>`";

}

/// One of the currently supported atomic types.
def Substrait_AtomicType : AnyTypeOf<Substrait_AtomicTypes.types>;

/// Any container type, i.e., structs, maps, lists, and nestings thereof.
def Substrait_ContainerType : NestedTupleOf<Substrait_AtomicTypes.types>;

/// One of the currently supported atomic or nested types.
def Substrait_FieldType : AnyTypeOf<[
  Substrait_AtomicType,
  Substrait_ContainerType
]>;

/// Placeholder for a proper relation type, the result of any `RelOpInterface`
/// op.
// TODO(ingomueller): Transform this into a proper relation type.
def Substrait_Relation : NestedTupleOf<Substrait_AtomicTypes.types>;

#endif // SUBSTRAIT_DIALECT_SUBSTRAIT_IR_SUBSTRAITTYPES
